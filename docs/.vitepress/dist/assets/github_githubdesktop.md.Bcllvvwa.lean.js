import{_ as e,a as o}from"./chunks/32.5MIUiaaw.js";import{_ as i,c as s,a3 as p,o as a}from"./chunks/framework.Bln4pwNK.js";const h="/COCchm-helpdoc/assets/38.BpiDln8L.png",d="/COCchm-helpdoc/assets/39.BDZCkCME.jpg",c="/COCchm-helpdoc/assets/40.D6U1meDh.png",r="/COCchm-helpdoc/assets/41.-d2kydPk.png",l="/COCchm-helpdoc/assets/42.BgrmFbBx.png",u="/COCchm-helpdoc/assets/43.Dw1Kr5YK.png",b="/COCchm-helpdoc/assets/46.BpEgPYWV.png",n="/COCchm-helpdoc/assets/47.3zB4lf7s.png",m="/COCchm-helpdoc/assets/48.B71V0vj9.png",k="/COCchm-helpdoc/assets/44.BcmXUfif.png",g="/COCchm-helpdoc/assets/49.CBddpvSc.jpeg",x=JSON.parse('{"title":"在GitHubDesktop上传编辑文件","description":"","frontmatter":{"lang":"zh-cn","title":"在GitHubDesktop上传编辑文件"},"headers":[],"relativePath":"github/githubdesktop.md","filePath":"github/githubdesktop.md"}'),G={name:"github/githubdesktop.md"};function _(D,t,f,C,H,w){return a(),s("div",null,t[0]||(t[0]=[p('<h1 id="在-github-desktop-上传编辑文件" tabindex="-1">在 GitHub Desktop 上传编辑文件 <a class="header-anchor" href="#在-github-desktop-上传编辑文件" aria-label="Permalink to &quot;在 GitHub Desktop 上传编辑文件&quot;">​</a></h1><h3 id="一-什么是-github-desktop" tabindex="-1">一.什么是 GitHub Desktop <a class="header-anchor" href="#一-什么是-github-desktop" aria-label="Permalink to &quot;一.什么是 GitHub Desktop&quot;">​</a></h3><p>GitHub 使用 git 分布式版本控制系统，而 git 最初是 LinusTorvalds 为帮助 Linux 开发而创造的，它针对的是 Linux 平台，因此 git 和 Windows 从来不是最好的朋友，因为它一点也不像 Windows。GitHub 发布了 GitHub Desktop，为Windows平台开发者提供了一个易于使用的 Git 图形客户端。</p><p>GitHub for Windows 是一个 Metro 风格应用程序，集成了自包含版本的Git，bash命令行shell，PowerShell的posh-git扩展。</p><p>简单来说，GitHub Desktop 是 Github 的电脑应用版，在 GitHub Desktop 里编辑、上传、合并文件比网页版更加快捷。但是 GitHub Desktop 的用户引导较差，使用时看不懂英文的话很有可能茫然而不是所措。我们推荐配合汉化包使用。</p><p>汉化包地址： <a href="https://Github.com/robotze/GithubDesktopZhTool" title="汉化包地址title" target="_blank" rel="noreferrer">https://Github.com/robotze/GithubDesktopZhTool</a></p><h3 id="二-如何下载-github-desktop" tabindex="-1">二.如何下载 GitHub Desktop <a class="header-anchor" href="#二-如何下载-github-desktop" aria-label="Permalink to &quot;二.如何下载 GitHub Desktop&quot;">​</a></h3><p>安装包下载界面： <a href="https://desktop.Github.com/download/" title="安装包下载界面" target="_blank" rel="noreferrer">https://desktop.Github.com/download/</a></p><p>因为特殊原因，一些人可能不能正常进入官方的安装包下载界面，不过 COC 不全书群里有 GitHub Desktop 的安装包。</p><p>安装包下好后，点击安装包就可以安装了了。</p><p>如果由于电脑原因，GitHub Desktop 实在下不来，群里也有现成汉化的整个 GitHub Desktop 的压缩包，下载那个压缩包然后解压就好了。</p><p>为了方便理解，接下来的演示都会用汉化版进行展示。</p><h3 id="三-在-github-desktop-克隆文件" tabindex="-1">三.在 GitHub Desktop 克隆文件 <a class="header-anchor" href="#三-在-github-desktop-克隆文件" aria-label="Permalink to &quot;三.在 GitHub Desktop 克隆文件&quot;">​</a></h3><p>克隆文件，指的是将你 Github 上的文件复制到你的本地电脑上，之后你就可以在电脑上直接修改文件了。</p><p>1.首先，你要确保你在 Github 网站上注册了一个账号，并 fork 了不全书，自己仓库里有复制的不全书仓库。以上步骤请查看 <a href="./github.html">如何注册 Github 账号</a>与<a href="./githubhttp.html">如何能够编辑 Github 库</a>。</p><p>2.然后在你想存储的地方新建一个文件夹，然后打开 GitHub Desktop，点击右上方的<code>当前储存库</code>。</p><img alt="" src="'+h+'" width="100%"><p>3.然后点击<code>添加</code>按钮，然后在小弹窗内选择<code>克隆储存库</code>。</p><img alt="" src="'+d+'" width="100%"><p>4.之后会弹出新窗口，先选中你要编辑的不全书库，切记要选中你 fork 的哪个，然后在本地路径那一栏点击<code>选择...</code>，然后在弹出的选择文件夹窗口里选中你之前建的空白夹，最后点击<code>选择文件夹</code>。</p><img alt="" src="'+c+'" width="100%"><p>5.做完以上步骤后，再点击克隆。</p><img alt="" src="'+r+'" width="100%"><p>6.等待仓库复制完成后，会有弹窗询问你打算如何使用此 fork，确认选中的是上面的那条<code>为父项目做贡献</code>，然后点击<code>确认</code>。</p><img alt="" src="'+l+'" width="100%"><p>7.重新点击<code>当前储存库</code>，当下面出现你要克隆的库时，就说明你克隆成功了。</p><img alt="" src="'+u+'" width="100%"><p>前往你选择的文件夹，里面有你复制的库里面的全部文件，git 是 GitHub Desktop 的插件，用于连接你的网络上的库和本地文件夹，前往不要删掉。</p><p>在这个文件夹，你可以快捷的添加、删除文件，跟你编辑本地文件夹并无区别。</p><img alt="" src="'+b+'" width="100%"><h3 id="四-通过-github-desktop-上传修改" tabindex="-1">四.通过 GitHub Desktop 上传修改 <a class="header-anchor" href="#四-通过-github-desktop-上传修改" aria-label="Permalink to &quot;四.通过 GitHub Desktop 上传修改&quot;">​</a></h3><p>通过 GitHub Desktop ，你可以在本地修改你的库，但你本地的修改只存在于你本地电脑中，并没有上传至网络中的库里。</p><p>如果你想把本地的修改上传至库中，你需要以下步骤。</p><p>1.打开 GitHub Desktop，在<code>当前储藏库</code>中选中你修改的库，可以看到你本地的修改出现在了右边的区域里。</p><p>2.然后在<code>摘要</code>填写你修改的地方。填写后点击<code>Commit 到 main</code>。</p><img alt="" src="'+n+'" width="100%"><p>3.等右边的界面显示本地无更改后，点击<code>推送 origin</code>，就能将你本地的修改上传至你网站上的库里了。</p><img alt="" src="'+m+'" width="100%"><h3 id="五-同步主仓库的更新" tabindex="-1">五.同步主仓库的更新 <a class="header-anchor" href="#五-同步主仓库的更新" aria-label="Permalink to &quot;五.同步主仓库的更新&quot;">​</a></h3><p>点击上方的<code>同步 origin</code>，就能同步更新了。</p><img alt="" src="'+k+'" width="100%"><h3 id="六-在-github-desktop-创建合并请求" tabindex="-1">六.在 GitHub Desktop 创建合并请求 <a class="header-anchor" href="#六-在-github-desktop-创建合并请求" aria-label="Permalink to &quot;六.在 GitHub Desktop 创建合并请求&quot;">​</a></h3><p>1.点击上方的<code>分支</code>，然后在新弹出的窗口里点击<code>创建拉取（Pull）请求</code>。</p><img alt="" src="'+g+'" width="100%"><p>2.然后游览器会弹出这个网站，在蓝框里填写你修改的情况。然后点击<code>Open pull request</code>。</p><img alt="" src="'+e+'" width="100%"><p>3.之后便会来到这个界面，当出现红框里面的内容时，就说明可以顺利合并了，等待管理员审核同意就可以了。</p><img alt="" src="'+o+'" width="100%">',48)]))}const P=i(G,[["render",_]]);export{x as __pageData,P as default};
