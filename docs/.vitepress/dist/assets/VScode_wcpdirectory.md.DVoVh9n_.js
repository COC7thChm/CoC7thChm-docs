import{_ as o,c,a3 as e,o as p}from"./chunks/framework.Bln4pwNK.js";const s="/COCchm-helpdoc/assets/1.B9ezSDs2.png",a="/COCchm-helpdoc/assets/2.BRTpqgDZ.png",d="/COCchm-helpdoc/assets/3.DTm21If6.png",r="/COCchm-helpdoc/assets/4.b3w-3_7g.png",h="/COCchm-helpdoc/assets/5.mfRh3Yld.png",i="/COCchm-helpdoc/assets/6.KMOHNkJU.png",l="/COCchm-helpdoc/assets/7.7LqWJn_Y.png",m="/COCchm-helpdoc/assets/8.C2VhFIPW.png",n="/COCchm-helpdoc/assets/9.B8NtLuxG.png",C="/COCchm-helpdoc/assets/10.ClzqYpV8.png",w="/COCchm-helpdoc/assets/11.UFeCX7vI.png",u="/COCchm-helpdoc/assets/12.CH3zQZDZ.png",g="/COCchm-helpdoc/assets/13.0eJ1gE6N.png",_="/COCchm-helpdoc/assets/14.CkIUc3cH.png",q="/COCchm-helpdoc/assets/15.C-PVKz1I.png",f="/COCchm-helpdoc/assets/16.CVme4u3g.png",b="/COCchm-helpdoc/assets/17.gHYWUiFu.png",O="/COCchm-helpdoc/assets/18.DibKelwl.png",P="/COCchm-helpdoc/assets/19.QGZnDwO4.png",k="/COCchm-helpdoc/assets/20.CZqoNTth.png",x="/COCchm-helpdoc/assets/21.D5syJF2E.png",y="/COCchm-helpdoc/assets/22.Dd-hmul1.png",W="/COCchm-helpdoc/assets/23.BenHDNEa.png",D="/COCchm-helpdoc/assets/24.sS0vh3gf.png",S="/COCchm-helpdoc/assets/25.C9EvEeGd.png",V="/COCchm-helpdoc/assets/26.DBjMO7Mr.png",v="/COCchm-helpdoc/assets/27.Bnm1ZiNV.png",H="/COCchm-helpdoc/assets/28.lPIqf29Y.png",B="/COCchm-helpdoc/assets/29.o0IMs9SW.png",T="/COCchm-helpdoc/assets/30.B-Dtlzr4.png",G="/COCchm-helpdoc/assets/31.Do5HXivx.png",$="/COCchm-helpdoc/assets/32.Cq1u5w30.png",I="/COCchm-helpdoc/assets/33.BDR1eweu.png",N="/COCchm-helpdoc/assets/34.ByiHfUfQ.png",E="/COCchm-helpdoc/assets/35.DOdCMACI.png",z="/COCchm-helpdoc/assets/36.Ch4ytRnA.png",F="/COCchm-helpdoc/assets/37.CE6AxVGa.png",Z="/COCchm-helpdoc/assets/38.BuvO90S1.png",J="/COCchm-helpdoc/assets/39.yXX_TCf_.png",Q=JSON.parse('{"title":"创建 wcp 目录","description":"","frontmatter":{"lang":"zh-cn","title":"创建 wcp 目录"},"headers":[],"relativePath":"VScode/wcpdirectory.md","filePath":"VScode/wcpdirectory.md"}'),L={name:"VScode/wcpdirectory.md"};function M(U,t,X,Y,K,R){return p(),c("div",null,t[0]||(t[0]=[e('<h1 id="创建-wcp-目录" tabindex="-1">创建 WCP 目录 <a class="header-anchor" href="#创建-wcp-目录" aria-label="Permalink to &quot;创建 WCP 目录&quot;">​</a></h1><p>用 Winchm 编辑时，第一次编辑项目后都要重新点一次路径，这十分麻烦，那有没有更快捷的办法，可以一次新建许多个项目，并且不用再导向新的文件夹。</p><p>首先，找到你要收集的规则扩展的 word 文件（如果是 pdf 的话建议先导成 word），然后为这个文件新建一个副本。</p><p>注意的是，一些原译给文件加上了文件保护，必须先建立副本才能在此之上继续编辑。</p><h2 id="一-导出目录" tabindex="-1">一.导出目录 <a class="header-anchor" href="#一-导出目录" aria-label="Permalink to &quot;一.导出目录&quot;">​</a></h2><p>首先导出原本的目录用于编辑，下面介绍 pdf 文件与 word 文件导出目录的方式。</p><h3 id="导出-pdf-文件目录" tabindex="-1">导出 pdf 文件目录 <a class="header-anchor" href="#导出-pdf-文件目录" aria-label="Permalink to &quot;导出 pdf 文件目录&quot;">​</a></h3><p>首先，是原译文是 pdf 情况下，导出目录。</p><p>首先用 WPS 打开 pdf 文件，然后如下图所示，先后点击<code>...</code>导出书签。</p><img alt="" src="'+s+'" width="100%"><p>然后会弹出保持文件界面，自己选择保存位置，然后在<code>文件夹类型</code>这里点击<code>TXT文件</code>，然后保存。</p><img alt="" src="'+a+'" width="100%"><p>然后点开预定的文件夹，不出意外的话，就可以找到目录的 txt 文件，为了之后的编辑，我们右键点击这个文件夹然后按照下图所示，用 VScode 打开文件。</p><img alt="" src="'+d+'" width="100%"><p>如图所示，这样就成功导出了。</p><img alt="" src="'+r+'" width="100%"><h3 id="word导出目录" tabindex="-1">word导出目录 <a class="header-anchor" href="#word导出目录" aria-label="Permalink to &quot;word导出目录&quot;">​</a></h3><p>word 文件跟 wps 文件不一样，不能导出目录。如果原译是 word 文件的话，导出目录要通过别的办法。</p><p>首先，打开之前创造的 word 副本。先点击<code>引用</code>，在引用这块点击<code>目录</code>，然后点击自动目录。</p><img alt="" src="'+h+'" width="100%"><p>然后复制系统生成的目录。</p><img alt="" src="'+i+'" width="100%"><p>然后回到 VScode，右键点击上方的标签栏，选择新建文本文件。</p><img alt="" src="'+l+'" width="100%"><p>在新建的页面里，把之前复制的目录贴贴进去，然后保存就好了。</p><img alt="" src="'+m+'" width="100%"><h2 id="二-批量新建文件、文件夹" tabindex="-1">二.批量新建文件、文件夹 <a class="header-anchor" href="#二-批量新建文件、文件夹" aria-label="Permalink to &quot;二.批量新建文件、文件夹&quot;">​</a></h2><p>编辑不全书时，我们要新建大量的文件与文件夹，但是一个个创立十分麻烦，我们可以开始时就把大部分文件与文件夹创立好，下面我们介绍如何一次性新建多个文件与文件夹。</p><h3 id="批量新建文件" tabindex="-1">批量新建文件 <a class="header-anchor" href="#批量新建文件" aria-label="Permalink to &quot;批量新建文件&quot;">​</a></h3><p>下面介绍如何一次性新建多个文件，不过在后面导出 htm 文件步骤中，会自动导出多个文件夹，你可以跳过这一步。</p><p>首先，先存编辑之前导出的目录，去掉页码还有文件与文件夹不能出现的字符。</p><img alt="" src="'+n+'" width="100%"><div class="tip custom-block"><p class="custom-block-title">Windows操作系统对文件和文件夹命名限制:</p><ol><li>以下字符不能出现在文件和文件夹名称中：（引号之内）<br> &#39;/&#39; &#39;?&#39; &#39;*&#39; &#39;:&#39; &#39;|&#39; &#39;&#39; &#39;&lt;&#39;&#39;&gt;&#39;（均为英文标点，中文的不受影响） 2.以下字符不能命名为文件或文件夹的名称：（引号之内）<br> &quot;con&quot;,&quot;aux&quot;,&quot;nul&quot;,&quot;prn&quot;,&quot;com0&quot;,&quot;com1&quot;,&quot;com2&quot;,&quot;com3&quot;,&quot;com4&quot;,&quot;com5&quot;,&quot;com6&quot;,&quot;com7&quot;&quot;com8&quot;,&quot;com9&quot;,&quot;lpt0&quot;,&quot;lpt1&quot;,&quot;lpt2&quot;,&quot;lpt3&quot;,&quot;lpt4&quot;,&quot;lpt5&quot;,&quot;lpt6&quot;,&quot;lpt7&quot;,&quot;lpt8&quot;,&quot;lpt9&quot; 3.另外，由于Windows对全文件名的字符长度作出258个字符以内的限制。全文件名长度指的是包括了文件路径的全部长度（一个汉字也按一个字符计算）。</li></ol></div><div class="tip custom-block"><p class="custom-block-title">快捷去除页码还有括号与括号内的字符</p><p>首先在查找项中打开正则匹配，然后点击搜索栏旁边的<code>.*</code>按钮开启正则匹配，然后在搜索栏中输入<code>\\t[0-9].*$</code>，然后再打开替换，替换项中什么都不用输入，然后点击全部替换。之后再输入<code>（.*）</code>重复上述操作。</p><p><code>\\t</code>：在正则匹配中代表水平制表符，水平制表符是一种特别的空格，导出的目录用这种空格来区分标题级别与隔开页码。</p><p>正则匹配的详细的原理，就是（）是中文括号，而<code>.*</code>代表中文括号内的全部字符。值得注意的是，搜索英文标点符号可能会跟正则匹配产生冲突导致出错，而中文标点符号基本上没这种烦恼。</p></div><p>然后在列选择模式下，拖动鼠标选中标题前缀。关于如何开启列选择模式，请查看<a href="./VScodetips.html">VScode使用技巧</a>页面。</p><img alt="" src="'+C+'" width="100%"><p>然后点击删除键，再点击空格键。让目录变为一行且中间用空格隔开，然后选中全文复制。</p><img alt="" src="'+w+'" width="100%"><p>之后在之前从 github 复制过来的仓库里，打开文件夹<code>Generator</code>与<code>模版</code>，分别找到两个文件夹里的<code>快捷建立文件.bat</code>与<code>全白页.htm</code>，将这两个复制贴贴桌面上，然后再在桌面新建文件夹<code>1</code>。</p><img alt="" src="'+u+'" width="100%"><p>然后右键点击<code>快捷建立文件.bat</code>，在弹窗里点击编辑。</p><img alt="" src="'+g+'" width="100%"><p>然后将之前复制的贴近如下图所示的括号里。</p><img alt="" src="'+_+'" width="100%"><p>然后回一瞬间闪过这个弹窗，但很快就关闭了。</p><img alt="" src="'+q+'" width="100%"><p>之后打开桌面上那个<code>1</code>文件夹，就可以看到文件已经建好了。</p><img alt="" src="'+f+'" width="100%"><h3 id="批量新建文件夹" tabindex="-1">批量新建文件夹 <a class="header-anchor" href="#批量新建文件夹" aria-label="Permalink to &quot;批量新建文件夹&quot;">​</a></h3><p>下面介绍如何批量新建文件夹。</p><p>首先，在之前从 github 复制过来的仓库里，打开文件夹<code>Generator</code>，找到里面的<code>快捷建立文件夹.bat</code>，将这个文件复制到桌面上，然后再在桌面新建文件夹<code>1</code>。</p><img alt="" src="'+b+'" width="100%"><p>然后右键点击<code>快捷建立文件夹.bat</code>，在弹窗里点击编辑。</p><img alt="" src="'+O+'" width="100%"><p>然后在括号内将你想要创建的文件夹名字填进去，至于哪些文件夹，请根据具体情况具体分析，不过你可以参考页面<a href="./../creed/2.read.html">合理分项</a>、<a href="./../creed/5.edit.html">规范编辑</a>里的内容。</p><img alt="" src="'+P+'" width="100%"><p>之后打开桌面上那个<code>1</code>文件夹，就可以看到文件夹已经建好了。</p><img alt="" src="'+k+'" width="100%"><p>之后就新建的文件夹（如果有新文件，也带上文件）拖到不全书仓库对应的文件夹。参照<a href="./../creed/2.read.html">合理分项</a>、<a href="./../creed/5.edit.html">规范编辑</a>，自行整理分类。</p><img alt="" src="'+x+'" width="100%"><h2 id="三-创造对应的-wcp-目录" tabindex="-1">三.创造对应的 WCP 目录 <a class="header-anchor" href="#三-创造对应的-wcp-目录" aria-label="Permalink to &quot;三.创造对应的 WCP 目录&quot;">​</a></h2><p>完成以上步骤后，我们就可以自行尝试创建 wcp 文件了，在 Winchm 上编辑时项目要一个个手动添加，十分麻烦，所以不全书提供了三种办法方便你一键生成 wcp 文件。</p><p>导出的 wcp 目录并不是最终的目录，在编辑过程中你可以随时在 Winchm 里进一步编辑它。</p><div class="tip custom-block"><p class="custom-block-title">如何将导出的目录改成方法1、2使用的形式</p><p>方法 1、2 中，要将目录文本改成既定的形式，如下图所示：</p><img alt="" src="'+y+'" width="100%"><p>为了使 py 插件可以识别文本，且可以做到建立子目录，使子项之间关系明确，我们不能直接拿导出的目录使用，而是要将目录按照上面的要求编辑后，再用py文件转换。下面介绍快速编辑的办法：</p><h4 id="编辑-pdf-导出的目录" tabindex="-1">编辑 PDF 导出的目录 <a class="header-anchor" href="#编辑-pdf-导出的目录" aria-label="Permalink to &quot;编辑 PDF 导出的目录&quot;">​</a></h4><p>首先去除目录的页码，先打开查找，然后点击搜索栏旁边的<code>.*</code>按钮开启正则匹配，然后在搜索栏中输入<code>\\t[0-9].*$</code>，然后再打开替换，然后全部替换。</p><p>\\t：在正则匹配中代表水平制表符，水平制表符是一种特别的空格，导出的目录用这种空格来区分标题级别与隔开页码。</p><img alt="" src="'+W+'" width="100%"><p>然后可以看到，目录因为级别不同，前面的空格（也是水平制表符）有所不同，下面我们从低到高，利用正则匹配快速编辑目录。</p><p>首先确认最低一级标题是第几级，上面的目录最低一级为第三级，第三级目录前有两个空格。</p><p>于是我们在查找项输入<code>\\t\\t(.*)</code>,再在替换项里输入<code>&lt;H4&gt;$1&lt;/H4&gt;</code>，然后全部替换。</p><p>之后再处理第二级标题，查找<code>\\t(.*)</code>，全部替换成<code>&lt;H3&gt;$1&lt;/H3&gt;</code>。</p><p>再是第一级标题，查找<code>^([^&lt;])(.*)</code>，全部替换成<code>&lt;H2&gt;$1$2&lt;/H2&gt;</code>。</p><p>然后再在目录最前面加上<code>&lt;H1&gt;&lt;扩展标题&gt;&lt;H1/&gt;</code>。然后再精简目录信息，如去掉第几章、第几步、序号等没实际意义的信息，此外删除一些可以直接跟其他板块块合并的内容。最后的结果如下。</p><img alt="" src="'+D+'" width="100%"><h4 id="编辑-word-导出的目录" tabindex="-1">编辑 word 导出的目录 <a class="header-anchor" href="#编辑-word-导出的目录" aria-label="Permalink to &quot;编辑 word 导出的目录&quot;">​</a></h4><p>编辑 word 导出的目录相比 pdf 的要麻烦一些，因为 word 导出的目录并不像 pdf 那样等级明确。</p><p>首先跟编辑 pdf 一样，去除目录的页码，先打开查找，然后点击搜索栏旁边的<code>.*</code>按钮开启正则匹配，然后在搜索栏中输入<code>\\t[0-9].*$</code>，然后再打开替换，然后全部替换。</p><p>然后参照 word 原本的目录，自己按照要求对目录进行分级。最后再精简目录信息，如去掉第几章、第几步、序号等没实际意义的信息。</p></div><h3 id="_1-目录一键生成-wcp-文件" tabindex="-1">1.目录一键生成 wcp 文件 <a class="header-anchor" href="#_1-目录一键生成-wcp-文件" aria-label="Permalink to &quot;1.目录一键生成 wcp 文件&quot;">​</a></h3><p>首先按照上面教程，编辑一版供插件识别的目录出来，然后复制。</p><p>在克隆过来的仓库里，打开<code>Generator</code>文件夹，点击<code>目录生成新WCP.py</code>（该插件需要用到 python，关于如何下载 py 请看<a href="./program.html">安装相关程序</a>）。</p><img alt="" src="'+S+'" width="100%"><p>然后会弹出一个新窗口，按照窗口指令分别输入要生成的 wcp 文件名、右键贴上之前复制的目录，最后回车两次。</p><img alt="" src="'+V+'" width="100%"><p>然后回到外面的文件夹，可以看到 wcp 文件已经建成了*（注：该插件默认你遵守了<a href="./../creed/2.read.html">合理分项</a>、<a href="./../creed/5.edit.html">规范编辑</a>来创办文件夹，收纳文件，如果你做了细微的改变，请自行新建插件副本，然后自己尝试编辑）。</p><img alt="" src="'+v+'" width="100%"><div class="tip custom-block"><p class="custom-block-title">如何将 wcp 目录导入另一个 wcp文件里</p><p>如果你想将新建的 wcp 文件目录导入到另一个 wcp 文件里，Winchm 提供了方便的导入办法。</p><p>首先打开你要导进去的 wcp 文件，然后点击<code>文件</code>&gt;<code>从另一个项目导入 TOC（T）…</code>，然后在弹出的新窗口选择你要导入的 wcp 文件，然后保存。</p><img alt="" src="'+H+'" width="100%"></div><h3 id="_2-编辑coc-不全书施工模版-wcp" tabindex="-1">2.编辑COC_不全书施工模版.wcp <a class="header-anchor" href="#_2-编辑coc-不全书施工模版-wcp" aria-label="Permalink to &quot;2.编辑COC_不全书施工模版.wcp&quot;">​</a></h3><p>在克隆过来的仓库里，打开<code>Generator</code>文件夹，点击<code>目录转WCP.py</code>，会弹出个新窗口（该插件需要用到 python，关于如何下载 py 请看<a href="./program.html">安装相关程序</a>）。</p><img alt="" src="'+B+'" width="100%"><p>然后把按照上面教程，编辑过目录复制过来，按照窗口指令右键贴上，最后回车两次。</p><img alt="" src="'+T+'" width="100%"><p>然后<code>Generator</code>夹里会多出一个<code>output.txt</code>，点开看就能看到之前的目录已经改成 wcp 的格式了*（注：该插件默认你遵守了<a href="./../creed/2.read.html">合理分项</a>、<a href="./../creed/5.edit.html">规范编辑</a> 来创办文件夹，收纳文件，如果你做了细微的改变，请自行新建插件副本，然后自己尝试编辑），然后复制该文件里的全部文字。</p><img alt="" src="'+G+'" width="100%"><p>之后回到外面的文件夹，复制贴贴<code>COC_不全书施工模版.wcp</code>，新建副本且改文件名字，然后右键点击要施工的 wcp 文件，选择用<code>VScode</code>打开。</p><img alt="" src="'+$+'" width="100%"><p>然后可以看到这种页面。</p><img alt="" src="'+I+'" width="100%"><p>然后拖动页面，将 TitleList.Kind.8=0 之后的全部行列全部删掉，再贴上之前导出的文本。</p><img alt="" src="'+N+'" width="100%"><p>最后确认最后面 TitleList. 的数字后缀是什么，然后回到 [TOPICS] 开头，将那个数字输入 TitleList=后面。</p><img alt="" src="'+E+'" width="100%"><p>然后打开要施工的 wcp 文件，就可以看到 wcp 已经编辑好了。完成后记得回去删除<code>Generator</code>新导出的<code>output.txt</code>文件。</p><img alt="" src="'+z+'" width="100%"><h3 id="_3-通过导入文件夹来生成-wcp" tabindex="-1">3.通过导入文件夹来生成 WCP <a class="header-anchor" href="#_3-通过导入文件夹来生成-wcp" aria-label="Permalink to &quot;3.通过导入文件夹来生成 WCP&quot;">​</a></h3><p>以上办法需要你自己编辑一份目录出来，不过你也可以不编辑目录，先制作文件夹与文件，且整理整齐后，再通过插件生成 wcp 文件，该办法不强求你遵守<a href="./../creed/2.read.html">合理分项</a>、<a href="./../creed/5.edit.html">规范编辑</a>。但是这种办法生成的 wcp 目录顺序是根据文件的首字母顺序来的，顺序需要你自己在 wcp 内部调整。</p><p>在克隆过来的仓库里，打开<code>Generator</code>文件夹，点击<code>文件夹做WCP.py</code>（该插件需要用到 python，关于如何下载 py 请看<a href="./program.html">安装相关程序</a> ）。然后在新弹出的窗口找到对应的文件夹，然后回到</p><img alt="" src="'+F+'" width="100%"><p>然后回到外面的文件夹，可以看到 wcp 文件已经建成了。</p><h2 id="四-其他" tabindex="-1">四.其他 <a class="header-anchor" href="#四-其他" aria-label="Permalink to &quot;四.其他&quot;">​</a></h2><h3 id="如何编辑-nbsp-py" tabindex="-1">如何编辑 py <a class="header-anchor" href="#如何编辑-nbsp-py" aria-label="Permalink to &quot;如何编辑&amp;nbsp;py&quot;">​</a></h3><p>以上的办法都要用到 py 创建 wcp 文件，你可以根据自己需要，在原来插件基础上，参考 py 文件内的注释进行编辑，以满足你自己的需求。</p><p>首先将你要编辑的插件复制贴贴新建一个副本。然后右键点击副本，然后点击编辑或者是用 VScode 打开文件。</p><img alt="" src="'+Z+'" width="100%"><h3 id="认识-wcp-文本" tabindex="-1">认识 WCP 文本 <a class="header-anchor" href="#认识-wcp-文本" aria-label="Permalink to &quot;认识 WCP 文本&quot;">​</a></h3><p>wcp 是一种文件类型，识别起来十分简单，下图描述了 wcp 文本里包含的一些基础信息。</p><img alt="" src="'+J+'" width="100%">',103)]))}const j=o(L,[["render",M]]);export{Q as __pageData,j as default};
